import{j as l}from"./jsx-runtime-DtaoT6pD.js";import{r as V}from"./index-OjgoNOWw.js";import{n as f}from"./emotion-styled.browser.esm-jsqElTi7.js";import{T as v}from"./typography-be8ycqzM.js";const F=f(v)(e=>({fontFamily:"inherit",outline:"none",boxSizing:"border-box",width:"100%",borderRadius:"4px",padding:"0 var(--pv-size-base-2)",backgroundColor:"var(--pv-color-gray-1)",borderStyle:"solid",borderWidth:"1px",transition:"background-color 200ms, color 200ms, border-color 200ms",display:"inline-flex",appearance:"none",...e.size==="small"&&{height:"var(--pv-size-base-6)"},...e.size==="medium"&&{height:"var(--pv-size-base-7)"},...e.size==="large"&&{height:"var(--pv-size-base-8)"}}),e=>{const o=e.theme.mode==="dark",t=o?"var(--pv-color-white)":"var(--pv-color-black)";let r="var(--pv-color-gray-8)",n="var(--pv-color-gray-9)",i="var(--pv-color-gray-7)",d="var(--pv-color-gray-5)",a="var(--pv-color-gray-7)",u="var(--pv-color-wrong-tint-5)",s="var(--pv-color-wrong-tint-3)",p="var(--pv-color-secondary-tint-5)",c="var(--pv-color-secondary-tint-3)";return o&&(r="var(--pv-color-gray-5)",n="var(--pv-color-gray-6)",i="var(--pv-color-gray-4)",d="var(--pv-color-gray-4)",a="var(--pv-color-gray-4)",u="var(--pv-color-wrong-shade-4)",s="var(--pv-color-wrong-shade-1)",p="var(--pv-color-secondary-shade-4)",c="var(--pv-color-secondary-shade-1)"),{color:t,borderColor:r,"&::placeholder":{color:n},"&:hover":{backgroundColor:"var(--pv-color-gray-3)",borderColor:i},"&:disabled":{cursor:"not-allowed",backgroundColor:"var(--pv-color-gray-1)",borderColor:d,color:a},"&:not(:disabled)":{"&[aria-invalid]":{backgroundColor:u,borderColor:s},"&:focus-visible":{backgroundColor:p,borderColor:c}}}}),w=f("label")({label:"TextField-label",marginBottom:"2px",display:"inline-block"}),k=f(v)({marginTop:"2px"}),m=V.forwardRef((e,o)=>{const{size:t,label:r,inputProps:n={},disabled:i,defaultValue:d,id:a,value:u,placeholder:s,required:p,name:c,inputRef:b,error:h,errorText:y,autoFocus:g,readOnly:T,type:x="text",onChange:q,...C}=e;return l.jsxs("div",{ref:o,...C,children:[r&&l.jsx(w,{htmlFor:a,children:l.jsx(v,{component:"span",variant:"c2",color:"gray-10",children:r})}),l.jsx(F,{...n,component:"input",variant:t==="small"?"c1":"b3",size:t,type:x,disabled:i,defaultValue:d,id:a,value:u,required:p,name:c,ref:b,autoFocus:g,"aria-invalid":h||void 0,onChange:q,placeholder:s,readOnly:T}),h&&y&&l.jsx(k,{variant:"c2",color:"wrong",children:y})]})});m.displayName="TextField";m.defaultProps={disabled:!1,size:"medium"};try{m.displayName="TextField",m.__docgenInfo={description:"",displayName:"TextField",props:{disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},size:{defaultValue:{value:"medium"},description:"The size of the input.",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},className:{defaultValue:null,description:"The className of the component.",name:"className",required:!1,type:{name:"string"}},inputProps:{defaultValue:null,description:"Attributes applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputHTMLAttributes<HTMLInputElement>"}},defaultValue:{defaultValue:null,description:"The default value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string | (string & readonly string[])"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"The label of the input. It is only used for layout.",name:"label",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the `input` before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},required:{defaultValue:null,description:"If `true`, the `input` element is required.",name:"required",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"Name attribute of the `input` element.",name:"name",required:!1,type:{name:"string"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"ForwardedRef<HTMLInputElement>"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element is focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},error:{defaultValue:null,description:"If `true`, the `input` will indicate an error.",name:"error",required:!1,type:{name:"boolean"}},errorText:{defaultValue:null,description:"",name:"errorText",required:!1,type:{name:"string"}},readOnly:{defaultValue:null,description:`It prevents the user from changing the value of
the field (not from interacting with the field).`,name:"readOnly",required:!1,type:{name:"boolean"}},type:{defaultValue:null,description:"Type of the `input` element.",name:"type",required:!1,type:{name:"HTMLInputTypeAttribute"}},onChange:{defaultValue:null,description:"Callback fired when the value is changed.",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLInputElement>"}}}}}catch{}export{m as T};
