import{j as o}from"./jsx-runtime-DtaoT6pD.js";import{r as w}from"./index-OjgoNOWw.js";import{n as f}from"./emotion-styled.browser.esm-jsqElTi7.js";import{T as h}from"./typography-be8ycqzM.js";import"./emotion-use-insertion-effect-with-fallbacks.browser.esm-xK8HOd_o.js";import"./emotion-element-c39617d8.browser.esm-upVMHClS.js";const k=f(h)(e=>({fontFamily:"inherit",outline:"none",boxSizing:"border-box",width:"100%",borderRadius:"4px",padding:"var(--pv-size-base) var(--pv-size-base-2)",backgroundColor:"var(--pv-color-gray-1)",borderStyle:"solid",borderWidth:"1px",transition:"background-color 200ms, color 200ms, border-color 200ms",display:"block",appearance:"none",resize:"none",...e.size==="small"&&{minHeight:"var(--pv-size-base-12)"},...e.size==="medium"&&{minHeight:"var(--pv-size-base-14)"},...e.size==="large"&&{minHeight:"var(--pv-size-base-16)"}}),e=>{const t=e.theme.mode==="dark",n=t?"var(--pv-color-white)":"var(--pv-color-black)";let r="var(--pv-color-gray-8)",i="var(--pv-color-gray-9)",d="var(--pv-color-gray-7)",s="var(--pv-color-gray-5)",a="var(--pv-color-gray-7)",u="var(--pv-color-wrong-tint-5)",p="var(--pv-color-wrong-tint-3)",c="var(--pv-color-secondary-tint-5)",m="var(--pv-color-secondary-tint-3)";return t&&(r="var(--pv-color-gray-5)",i="var(--pv-color-gray-6)",d="var(--pv-color-gray-4)",s="var(--pv-color-gray-4)",a="var(--pv-color-gray-4)",u="var(--pv-color-wrong-shade-4)",p="var(--pv-color-wrong-shade-1)",c="var(--pv-color-secondary-shade-4)",m="var(--pv-color-secondary-shade-1)"),{color:n,borderColor:r,"&::placeholder":{color:i},"&:hover":{backgroundColor:"var(--pv-color-gray-3)",borderColor:d},"&:disabled":{cursor:"not-allowed",backgroundColor:"var(--pv-color-gray-1)",borderColor:s,color:a},"&:not(:disabled)":{"&[aria-invalid]":{backgroundColor:u,borderColor:p},"&:focus-visible":{backgroundColor:c,borderColor:m}}}}),P=f("label")({marginBottom:"2px",display:"inline-block"}),_=f(h)({marginTop:"2px"}),l=w.forwardRef((e,t)=>{const{size:n,label:r,inputProps:i={},disabled:d,defaultValue:s,id:a,value:u,placeholder:p,required:c,name:m,inputRef:C,error:g,errorText:b,autoFocus:q,readOnly:V,onChange:z,...F}=e;return o.jsxs("div",{ref:t,...F,children:[r&&o.jsx(P,{htmlFor:a,children:o.jsx(h,{component:"span",variant:"c2",color:"gray-10",children:r})}),o.jsx(k,{...i,component:"textarea",variant:n==="small"?"c1":"b3",size:n,disabled:d,defaultValue:s,id:a,value:u,required:c,name:m,ref:C,autoFocus:q,"aria-invalid":g||void 0,onChange:z,placeholder:p,readOnly:V}),g&&b&&o.jsx(_,{variant:"c2",color:"wrong",children:b})]})});l.displayName="TextareaField";l.defaultProps={disabled:!1,size:"medium"};try{l.displayName="TextareaField",l.__docgenInfo={description:"",displayName:"TextareaField",props:{disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},size:{defaultValue:{value:"medium"},description:"The size of the input.",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},className:{defaultValue:null,description:"The className of the component.",name:"className",required:!1,type:{name:"string"}},inputProps:{defaultValue:null,description:"Attributes applied to the `input` element.",name:"inputProps",required:!1,type:{name:'Omit<InputHTMLAttributes<HTMLTextAreaElement>, "size">'}},defaultValue:{defaultValue:null,description:"The default value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string | (string & readonly string[])"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"The label of the input. It is only used for layout.",name:"label",required:!1,type:{name:"string"}},onChange:{defaultValue:null,description:"Callback fired when the value is changed.",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLTextAreaElement>"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the `input` before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},required:{defaultValue:null,description:"If `true`, the `input` element is required.",name:"required",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"Name attribute of the `input` element.",name:"name",required:!1,type:{name:"string"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"ForwardedRef<HTMLTextAreaElement>"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element is focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},error:{defaultValue:null,description:"If `true`, the `input` will indicate an error.",name:"error",required:!1,type:{name:"boolean"}},errorText:{defaultValue:null,description:"",name:"errorText",required:!1,type:{name:"string"}},readOnly:{defaultValue:null,description:`It prevents the user from changing the value of
the field (not from interacting with the field).`,name:"readOnly",required:!1,type:{name:"boolean"}}}}}catch{}const A={title:"Components/TextareaField",component:l,tags:["autodocs"],args:{placeholder:"Placeholder"},argTypes:{inputProps:{control:!1},inputRef:{control:!1},onChange:{control:!1}}},v={};var y,x,T;v.parameters={...v.parameters,docs:{...(y=v.parameters)==null?void 0:y.docs,source:{originalSource:"{}",...(T=(x=v.parameters)==null?void 0:x.docs)==null?void 0:T.source}}};const L=["Playground"];export{v as Playground,L as __namedExportsOrder,A as default};
