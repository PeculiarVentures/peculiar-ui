import{j as a}from"./jsx-runtime-xF634gn_.js";import{r as I}from"./index-C-7etoUd.js";import{n as m}from"./emotion-styled.browser.esm-4GIPFSzo.js";import{u as w}from"./use_id-Bg_loyUk.js";import{T as f}from"./typography-Dm_feQWn.js";const z=m(f)(e=>({fontFamily:"inherit",outline:"none",boxSizing:"border-box",width:"100%",borderRadius:"4px",padding:"0 var(--pv-size-base-2)",backgroundColor:"var(--pv-color-gray-1)",borderStyle:"solid",borderWidth:"1px",transition:"background-color 200ms, color 200ms, border-color 200ms",display:"inline-flex",appearance:"none",...e.size==="small"&&{height:"var(--pv-size-base-6)"},...e.size==="medium"&&{height:"var(--pv-size-base-7)"},...e.size==="large"&&{height:"var(--pv-size-base-8)"}}),e=>{const l=e.theme.mode==="dark",t=l?"var(--pv-color-white)":"var(--pv-color-black)";let r="var(--pv-color-gray-8)",o="var(--pv-color-gray-9)";const u="var(--pv-color-gray-10)";let n="var(--pv-color-gray-5)",i="var(--pv-color-gray-7)";const s="var(--pv-color-wrong)",p="var(--pv-color-secondary)";return l&&(r="var(--pv-color-gray-5)",o="var(--pv-color-gray-6)",n="var(--pv-color-gray-4)",i="var(--pv-color-gray-4)"),{color:t,borderColor:r,"&::placeholder":{color:o},"&:hover":{borderColor:u},"&:disabled":{cursor:"not-allowed",borderColor:n,color:i},"&:not(:disabled)":{"&[aria-invalid]":{borderColor:s},"&:focus-visible":{borderColor:p}}}}),_=m("label")({label:"TextField-label",marginBottom:"2px",display:"inline-block"}),j=m(f)({marginTop:"2px"}),c=I.forwardRef((e,l)=>{const{size:t="medium",label:r,inputProps:o={},disabled:u=!1,defaultValue:n,id:i,value:s,placeholder:p,required:b,name:y,inputRef:g,error:h,errorText:v,autoFocus:T,readOnly:x,type:q="text",onChange:V,...C}=e,d=w(i),F=r&&d?`${d}-label`:void 0;return a.jsxs("div",{ref:l,...C,children:[r&&a.jsx(_,{htmlFor:d,id:F,children:a.jsx(f,{component:"span",variant:"c2",color:"gray-10",children:r})}),a.jsx(z,{...o,component:"input",variant:t==="small"?"c1":"b3",size:t,type:q,disabled:u,defaultValue:n,id:d,value:s,required:b,name:y,"aria-invalid":h||void 0,placeholder:p,readOnly:x,ref:g,autoFocus:T,onChange:V}),h&&v&&a.jsx(j,{variant:"c2",color:"wrong",children:v})]})});c.displayName="TextField";try{c.displayName="TextField",c.__docgenInfo={description:"",displayName:"TextField",props:{disabled:{defaultValue:{value:"false"},description:"If `true`, the component is disabled.",name:"disabled",required:!1,type:{name:"boolean"}},size:{defaultValue:{value:"'medium'"},description:"The size of the input.",name:"size",required:!1,type:{name:"enum",value:[{value:'"small"'},{value:'"medium"'},{value:'"large"'}]}},className:{defaultValue:null,description:"The className of the component.",name:"className",required:!1,type:{name:"string"}},inputProps:{defaultValue:null,description:"Attributes applied to the `input` element.",name:"inputProps",required:!1,type:{name:"InputHTMLAttributes<HTMLInputElement>"}},defaultValue:{defaultValue:null,description:"The default value. Use when the component is not controlled.",name:"defaultValue",required:!1,type:{name:"string | (string & readonly string[])"}},id:{defaultValue:null,description:"The id of the `input` element.",name:"id",required:!1,type:{name:"string"}},label:{defaultValue:null,description:"The label content.",name:"label",required:!1,type:{name:"string"}},value:{defaultValue:null,description:"The value of the `input` element, required for a controlled component.",name:"value",required:!1,type:{name:"string"}},placeholder:{defaultValue:null,description:"The short hint displayed in the `input` before the user enters a value.",name:"placeholder",required:!1,type:{name:"string"}},required:{defaultValue:null,description:"If `true`, the `input` element is required.",name:"required",required:!1,type:{name:"boolean"}},name:{defaultValue:null,description:"Name attribute of the `input` element.",name:"name",required:!1,type:{name:"string"}},inputRef:{defaultValue:null,description:"Pass a ref to the `input` element.",name:"inputRef",required:!1,type:{name:"ForwardedRef<HTMLInputElement>"}},autoFocus:{defaultValue:null,description:"If `true`, the `input` element is focused during the first mount.",name:"autoFocus",required:!1,type:{name:"boolean"}},error:{defaultValue:null,description:"If `true`, the `input` will indicate an error.",name:"error",required:!1,type:{name:"boolean"}},errorText:{defaultValue:null,description:"",name:"errorText",required:!1,type:{name:"string"}},readOnly:{defaultValue:null,description:`It prevents the user from changing the value of
the field (not from interacting with the field).`,name:"readOnly",required:!1,type:{name:"boolean"}},type:{defaultValue:null,description:"Type of the `input` element.",name:"type",required:!1,type:{name:"HTMLInputTypeAttribute"}},onChange:{defaultValue:null,description:"Callback fired when the value is changed.",name:"onChange",required:!1,type:{name:"ChangeEventHandler<HTMLInputElement>"}}}}}catch{}export{c as T};
